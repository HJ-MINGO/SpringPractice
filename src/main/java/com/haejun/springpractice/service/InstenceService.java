package com.haejun.springpractice.service;

/**
 * packageName    : com.haejun.springpractice.service
 * fileName       : InstenceService
 * author         : NAHAEJUN
 * date           : 2024-06-19
 * description    :
 * ===========================================================
 * DATE              AUTHOR             NOTE
 * -----------------------------------------------------------
 * 2024-06-19        NAHAEJUN              최초생성
 */
public class InstenceService {
    /**
     * 다형성
     *
     * 역할 과 구현으로 세상을 구분
     *
     * 유연하고 변경이 용이하다 --> 운전자는 자동차가 뭘로 바뀌어도 영향을주지않는다.
     *
     * 운전자의 역할은 자동차를 운전한다 일뿐이지
     *
     * 자동차가 무엇인지는 알필요가없기떄문이다. 자동차는 자동차의 역할만 다하면된다. 해당 자동차가 기아이건, 르노삼성이드 테슬라든
     *
     * - 클라이언트는 대상의 역할(인터페이스)만 알면된다.
     * - 클라이언트는 구현 대상의 내부 구조를 몰라도 된다.
     * - 클라이언트는 구현 대상의 내부구조가 변경되어도 영향을 받지 않는다.
     * - 클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않는다.
     *
     *
     *
     *
     * 즉,유연하고 변경이 용히하다.
     *
     *
     *
     * 역할 = 인터페이스
     * 구현 = 인터페이스 구현체
     *
     * 객체 설계시 역할과 구현을 명확히 분리해라
     *
     * 객체 설계시 역할(인터페이스)를 먼저 부옇라고, 그역할을 수행하는 구현 객체 만들기 (구현보다 역할이 중요하다.)
     *
     *
     * 다형성의 본질
     * - 인터페이스를 구현한 객체 인스턴스를 실행 시점에 유연하게 변경할 수 있다
     * - 다형성의 본질을 이해하려면 협력이라는 객체사이의 관계에서 시작해야한다
     * - 클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경 할 수 있다.
     *
     * 솔리드 (SOLID)
     *
     * - SRP : 단일 책임 원칙
     * 1. 한 클래스는 하나의 책임만 가진다.
     * 2. 하나의 책임이라는것은 모호하다.
     * 2-1 . 클수 있고 작을수 있다.
     * 2-2. 문맥과 상황에 따라 다르다.
     * 2-3. 중요한 기준은 변경이다. 변경이 있을 때 파급효과 적으면 단일 책임 원칙을 잘 따른것
     * 될수있음 크기를 작게할수록 변경이 피해가 적으며. 규모가 커지면 커질수록 파급효과가 커지기 떄문에 책임원칙에서 점점 멀어진다.
     * EX) UI변경, 객체의 생성과 사용을 분리
     *
     *
     * - OCP : 개방-폐쇠 원칙
     * 1. 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야한다.
     * 2. 다형성을 활용하자.
     * 3. 인터페이스를 구현한 새로운 클래스를 만들어 새로운 기능을 제공하는것은 코드를 변경하는게 아닌 말그대로 기능을 새로 구현한것이다.
     *
     *
     * - LSP : 리스코프 치환 원칙
     * - ISP : 인터페이스 분리 원칙
     * - DIP : 의존관계 역전 원칙
     *
     *
     * */
}
